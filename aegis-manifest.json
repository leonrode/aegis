{
    "name": "aegis",
    "version": "0.1.0",
    "servers": {
        "google-calendar": {
            "io": "stdio",
            "pull_prompt": "You are an intelligent calendar assistant that has access to a user's calendar services via a set of tools. Your goal is to retrieve the latest data out of their Google Calendar account. You will do this by first using the get-timezone-info tool, which returns you the user's timezone. Then you will use the get-events tool, passing 'primary' as the calendarId, and 10 for maxResults.",
            "control_prompt": "You are an intelligent agent that has access to a user's services via a set of tools. Your goal is to help the user by translating their natural language requests into a precise, multi-step plan of tool calls.\\n\\n***\\n### ## Core Principles for Planning\\n\\n1.  **Reason from Purpose, Not Just Name.** Your primary goal is to fulfill the user's intent. Before choosing a tool, first identify the **purpose** of the data you need (e.g., `TEMPORAL_ANCHOR` for scheduling, `INTERACTION_LOG` for communication history). Then, find tools that return data types (`data_provided`) with that purpose.\\n2.  **Distinguish Between Resources and References.** Pay close attention to the `returns` field of each tool.\\n    * If a tool `returns: { \"items\": \"calendar_event\" }`, you will receive the full data object.\\n    * If a tool `returns: { \"items\": { \"is_reference_to\": \"calendar_event\" } }`, you will only receive an **ID** (a reference). You must then devise a plan to use another tool (like a `get-detail` function) to fetch the full resource using that ID.\\n3.  **Always Establish Context.** Before executing a plan, use utility tools like `get-current-date` and `get-timezone-info` to ground your understanding of the user's request in the correct time and place.\\n\\n***\\n### ## Your Planning Process\\n\\nFor every user query, you must follow this four-step process:\\n\\n1.  **Deconstruct the Goal:** What is the user's ultimate objective? (e.g., \"reschedule a meeting,\" \"find an email\").\\n2.  **Identify Required Data:** What specific pieces of information (and their `purpose` tags) do you need to fulfill the goal? Do you need a full resource or just a reference to start?\\n3.  **Formulate a Multi-Step Plan:** Create a sequence of tool calls. If you need an `eventId` to update an event, your first step must be to call a tool that can find a *reference* to that event.\\n4.  **Execute and Adapt:** Execute the first step of your plan. Based on the result, continue with your plan or adapt it if necessary. If the user's request is ambiguous or you cannot find a resource, inform the user and ask for clarification.\\n\\n***\\n### ## Example Thought Process\\n\\n**User Query:** \"Move my 'Product Review' meeting to this Friday at 4pm.\"\\n\\n**Your internal thought process should be:**\\n\\n1.  **Goal:** Update an existing calendar event.\\n2.  **Required Data:** The `update-event` tool requires an `eventId`. I do not have this. The `eventId` is contained within a `calendar_event` resource, which has a `TEMPORAL_ANCHOR` purpose.\\n3.  **Plan:**\\n    * First, I need to find a *reference* to the `calendar_event` to get its ID. I will use the `get-events` tool, which returns an array of `calendar_event` objects.\\n    * Before I search, I need to know the date for \"this Friday\". I will call `get-current-date`.\\n    * **Step 1:** Call `get-current-date`.\\n    * **Step 2:** Call `get-events` using a search query like \"Product Review\" and the date range for the current week to find the event and its `eventId`.\\n    * **Step 3:** Call `update-event` using the `eventId` from Step 2 and the new time (\"this Friday at 4pm\").\\n4.  **Execute:** Begin by calling `get-current-date`.\\n\\n---\\n### ## Specific Instructions\\n\\n* If a user refers to their own calendar as \"my calendar\" or \"my schedule\", you must use the special string `\"primary\"` for the `calendarId`.\\n* For all other calendars, you must first use `list-calendars` to find the correct `calendarId`.",
            "startup": [
                "python3",
                "-m",
                "local-mcp-test.mcp-google-calendar.mcp_server_google_calendar"
            ],
            "cwd": "",
            "auth": true,
            "tools": [
                {
                    "name": "get-events",
                    "description": "Get events from calendar",
                    "params": {
                        "type": "object",
                        "properties": {
                            "calendarId": {
                                "type": "string",
                                "description": "The ID of the calendar to get events from"
                            },
                            "timeMin": {
                                "type": "string",
                                "description": "The minimum time to get events from"
                            },
                            "timeMax": {
                                "type": "string",
                                "description": "The maximum time to get events from"
                            },
                            "maxResults": {
                                "type": "number",
                                "description": "The maximum number of events to return"
                            },
                            "singleEvents": {
                                "type": "boolean",
                                "description": "Whether to expand recurring events into instances"
                            },
                            "orderBy": {
                                "type": "string",
                                "description": "The order of the events returned",
                                "enum": [
                                    "startTime",
                                    "updated"
                                ]
                            }
                        },
                        "required": [
                            "calendarId"
                        ]
                    },
                    "returns": {
                        "type": "array",
                        "items": "calendar_event"
                    }
                },
                {
                    "name": "list-calendars",
                    "description": "List all calendars",
                    "returns": {
                        "type": "array",
                        "items": "calendar"
                    }
                },
                {
                    "name": "get-timezone-info",
                    "description": "Get the current timezone information from Google Calendar",
                    "returns": {
                        "type": "object",
                        "items": "timezone"
                    }
                },
                {
                    "name": "get-current-date",
                    "description": "Get the current date and time in the user's timezone. Useful for models that may have outdated knowledge of the current date.",
                    "returns": {
                        "type": "object",
                        "items": "date"
                    }
                },
                {
                    "name": "check-availability",
                    "description": "Check availability for yourself and/or others. When checking for other people in the organization, their emails will always be their name and then @gmail.com",
                    "params": {
                        "type": "object",
                        "properties": {
                            "calendarExpansionMax": {
                                "type": "number",
                                "description": "Maximal number of calendars for which FreeBusy information is to be provided. Optional. Maximum value is 50."
                            },
                            "groupExpansionMax": {
                                "type": "number",
                                "description": "Maximal number of calendar identifiers to be provided for a single group. Optional. An error is returned for a group with more members than this value. Maximum value is 100."
                            },
                            "items": {
                                "type": "array",
                                "description": "List of calendars and/or groups to query for FreeBusy information. Optional.",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "id": {
                                            "type": "string",
                                            "description": "The identifier of a calendar or a group."
                                        }
                                    }
                                }
                            },
                            "timeMax": {
                                "type": "string",
                                "description": "The end of the interval for the query formatted as per RFC3339."
                            },
                            "timeMin": {
                                "type": "string",
                                "description": "The start of the interval for the query formatted as per RFC3339."
                            },
                            "timeZone": {
                                "type": "string",
                                "description": "Time zone used in the response. Optional. The default is UTC."
                            }
                        }
                    },
                    "returns": {
                        "type": "object",
                        "properties": {
                            "free_slots": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "start": {
                                            "type": "string"
                                        },
                                        "end": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                {
                    "name": "create-event",
                    "description": "Create an event in Google Calendar. Supports both simple and complex events with all advanced features.",
                    "params": {
                        "type": "object",
                        "properties": {
                            "calendarId": {
                                "type": "string",
                                "description": "The ID of the calendar to create the event in. Use 'primary' for the user's primary calendar."
                            },
                            "summary": {
                                "type": "string",
                                "description": "Title of the event"
                            },
                            "description": {
                                "type": "string",
                                "description": "Description of the event. Can contain HTML."
                            },
                            "location": {
                                "type": "string",
                                "description": "Geographic location of the event as free-form text"
                            },
                            "colorId": {
                                "type": "string",
                                "description": "The color of the event. See the Calendar UI for the list of available colors."
                            },
                            "start_datetime": {
                                "type": "string",
                                "description": "Start time (YYYY-MM-DDTHH:MM:SS format or RFC3339)"
                            },
                            "end_datetime": {
                                "type": "string",
                                "description": "End time (YYYY-MM-DDTHH:MM:SS format or RFC3339)"
                            },
                            "timezone": {
                                "type": "string",
                                "description": "Timezone for the event (optional, auto-detected if not provided)"
                            },
                            "recurrence": {
                                "type": "array",
                                "description": "List of RRULE, EXRULE, RDATE and EXDATE lines for a recurring event",
                                "items": {
                                    "type": "string",
                                    "description": "Recurrence rule in iCalendar format (e.g., 'RRULE:FREQ=WEEKLY;COUNT=10;BYDAY=TU')"
                                }
                            },
                            "attendees": {
                                "type": "array",
                                "description": "The attendees of the event",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "email": {
                                            "type": "string",
                                            "description": "The attendee's email address"
                                        },
                                        "displayName": {
                                            "type": "string",
                                            "description": "The attendee's name, if available"
                                        },
                                        "optional": {
                                            "type": "boolean",
                                            "description": "Whether this is an optional attendee",
                                            "default": false
                                        },
                                        "responseStatus": {
                                            "type": "string",
                                            "description": "The attendee's response status",
                                            "enum": [
                                                "needsAction",
                                                "declined",
                                                "tentative",
                                                "accepted"
                                            ],
                                            "default": "needsAction"
                                        },
                                        "comment": {
                                            "type": "string",
                                            "description": "The attendee's response comment"
                                        },
                                        "additionalGuests": {
                                            "type": "integer",
                                            "description": "Number of additional guests",
                                            "minimum": 0,
                                            "default": 0
                                        }
                                    },
                                    "required": [
                                        "email"
                                    ]
                                }
                            },
                            "attachments": {
                                "type": "array",
                                "description": "File attachments for the event (Google Drive files only)",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "fileId": {
                                            "type": "string",
                                            "description": "ID of the Google Drive file"
                                        },
                                        "fileUrl": {
                                            "type": "string",
                                            "description": "URL of the file in Google Drive"
                                        },
                                        "title": {
                                            "type": "string",
                                            "description": "Title of the attachment"
                                        },
                                        "mimeType": {
                                            "type": "string",
                                            "description": "MIME type of the attachment"
                                        }
                                    },
                                    "required": [
                                        "fileId"
                                    ]
                                },
                                "maxItems": 25
                            },
                            "reminders": {
                                "type": "object",
                                "description": "Reminders for the event",
                                "properties": {
                                    "useDefault": {
                                        "type": "boolean",
                                        "description": "Whether to use the default reminders of the calendar",
                                        "default": true
                                    },
                                    "overrides": {
                                        "type": "array",
                                        "description": "Custom reminders for the event",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "method": {
                                                    "type": "string",
                                                    "description": "The method used by this reminder",
                                                    "enum": [
                                                        "email",
                                                        "popup"
                                                    ]
                                                },
                                                "minutes": {
                                                    "type": "integer",
                                                    "description": "Number of minutes before the event to trigger the reminder"
                                                }
                                            },
                                            "required": [
                                                "method",
                                                "minutes"
                                            ]
                                        }
                                    }
                                }
                            },
                            "visibility": {
                                "type": "string",
                                "description": "Visibility of the event",
                                "enum": [
                                    "default",
                                    "public",
                                    "private",
                                    "confidential"
                                ],
                                "default": "default"
                            },
                            "transparency": {
                                "type": "string",
                                "description": "Whether the event blocks time on the calendar",
                                "enum": [
                                    "opaque",
                                    "transparent"
                                ],
                                "default": "opaque"
                            },
                            "conferenceData": {
                                "type": "object",
                                "description": "Conference-related information",
                                "properties": {
                                    "createRequest": {
                                        "type": "object",
                                        "description": "Request to create a new conference",
                                        "properties": {
                                            "requestId": {
                                                "type": "string",
                                                "description": "Client-generated unique ID for this request"
                                            },
                                            "conferenceSolutionKey": {
                                                "type": "object",
                                                "properties": {
                                                    "type": {
                                                        "type": "string",
                                                        "description": "Conference solution type (e.g., 'hangoutsMeet')"
                                                    }
                                                },
                                                "required": [
                                                    "type"
                                                ]
                                            }
                                        },
                                        "required": [
                                            "requestId"
                                        ]
                                    }
                                }
                            }
                        },
                        "required": [
                            "calendarId",
                            "summary",
                            "start_datetime",
                            "end_datetime"
                        ]
                    },
                    "returns": {
                        "type": "object",
                        "items": "calendar_event"
                    }
                },
                {
                    "name": "delete-event",
                    "description": "Delete an event from Google Calendar",
                    "params": {
                        "type": "object",
                        "properties": {
                            "calendarId": {
                                "type": "string",
                                "description": "The ID of the calendar containing the event. Use 'primary' for the user's primary calendar."
                            },
                            "eventId": {
                                "type": "string",
                                "description": "The ID of the event to delete"
                            },
                            "sendUpdates": {
                                "type": "string",
                                "description": "Whether to send notifications about the deletion to all attendees",
                                "enum": [
                                    "all",
                                    "externalOnly",
                                    "none"
                                ],
                                "default": "all"
                            }
                        },
                        "required": [
                            "calendarId",
                            "eventId"
                        ]
                    },
                    "returns": {
                        "type": "object",
                        "properties": {
                            "status": {
                                "type": "string",
                                "enum": [
                                    "success",
                                    "failure"
                                ]
                            }
                        }
                    }
                },
                {
                    "name": "update-event",
                    "description": "Update an existing event in Google Calendar. All fields are optional - only specify the fields you want to update.",
                    "params": {
                        "type": "object",
                        "properties": {
                            "calendarId": {
                                "type": "string",
                                "description": "The ID of the calendar containing the event. Use 'primary' for the user's primary calendar."
                            },
                            "eventId": {
                                "type": "string",
                                "description": "The ID of the event to update"
                            },
                            "summary": {
                                "type": "string",
                                "description": "New title of the event"
                            },
                            "description": {
                                "type": "string",
                                "description": "New description of the event. Can contain HTML."
                            },
                            "location": {
                                "type": "string",
                                "description": "New location of the event"
                            },
                            "colorId": {
                                "type": "string",
                                "description": "The color of the event"
                            },
                            "start_datetime": {
                                "type": "string",
                                "description": "New start time (YYYY-MM-DDTHH:MM:SS format or RFC3339)"
                            },
                            "end_datetime": {
                                "type": "string",
                                "description": "New end time (YYYY-MM-DDTHH:MM:SS format or RFC3339)"
                            },
                            "timezone": {
                                "type": "string",
                                "description": "Timezone for the event (optional, auto-detected if not provided)"
                            },
                            "attendees": {
                                "type": "array",
                                "description": "List of attendees for the event",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "email": {
                                            "type": "string",
                                            "description": "The attendee's email address"
                                        },
                                        "displayName": {
                                            "type": "string",
                                            "description": "The attendee's name, if available"
                                        },
                                        "optional": {
                                            "type": "boolean",
                                            "description": "Whether this is an optional attendee",
                                            "default": false
                                        },
                                        "responseStatus": {
                                            "type": "string",
                                            "description": "The attendee's response status",
                                            "enum": [
                                                "needsAction",
                                                "declined",
                                                "tentative",
                                                "accepted"
                                            ],
                                            "default": "needsAction"
                                        }
                                    },
                                    "required": [
                                        "email"
                                    ]
                                }
                            },
                            "recurrence": {
                                "type": "array",
                                "description": "List of RRULE, EXRULE, RDATE and EXDATE lines for a recurring event",
                                "items": {
                                    "type": "string",
                                    "description": "Recurrence rule in iCalendar format (e.g., 'RRULE:FREQ=WEEKLY;COUNT=10;BYDAY=TU')"
                                }
                            },
                            "reminders": {
                                "type": "object",
                                "description": "Reminders for the event",
                                "properties": {
                                    "useDefault": {
                                        "type": "boolean",
                                        "description": "Whether to use the default reminders of the calendar",
                                        "default": true
                                    },
                                    "overrides": {
                                        "type": "array",
                                        "description": "Custom reminders for the event",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "method": {
                                                    "type": "string",
                                                    "description": "The method used by this reminder",
                                                    "enum": [
                                                        "email",
                                                        "popup"
                                                    ]
                                                },
                                                "minutes": {
                                                    "type": "integer",
                                                    "description": "Number of minutes before the event to trigger the reminder"
                                                }
                                            },
                                            "required": [
                                                "method",
                                                "minutes"
                                            ]
                                        }
                                    }
                                }
                            },
                            "visibility": {
                                "type": "string",
                                "description": "Visibility of the event",
                                "enum": [
                                    "default",
                                    "public",
                                    "private",
                                    "confidential"
                                ],
                                "default": "default"
                            },
                            "transparency": {
                                "type": "string",
                                "description": "Whether the event blocks time on the calendar",
                                "enum": [
                                    "opaque",
                                    "transparent"
                                ],
                                "default": "opaque"
                            },
                            "sendUpdates": {
                                "type": "string",
                                "description": "Whether to send notifications about the update to all attendees",
                                "enum": [
                                    "all",
                                    "externalOnly",
                                    "none"
                                ],
                                "default": "all"
                            }
                        },
                        "required": [
                            "calendarId",
                            "eventId"
                        ]
                    },
                    "returns": {
                        "type": "object",
                        "items": "calendar_event"
                    }
                }
            ],
            "data": [
                {
                    "name": "calendar_event",
                    "description": "A single event, appointment, or meeting in a calendar",
                    "purpose": [
                        "TEMPORAL_ANCHOR, STATE_RECORD"
                    ]
                },
                {
                    "name": "calendar",
                    "description": "A calendar, or a collection of events, appointments, or meetings",
                    "purpose": [
                        "STATE_RECORD",
                        "KNOWLEDGE_BASE_ENTRY",
                        "STRUCTURAL_CONTAINER"
                    ]
                },
                {
                    "name": "timezone",
                    "description": "A timezone, or a collection of timezones",
                    "purpose": [
                        "STATE_RECORD"
                    ]
                },
                {
                    "name": "date",
                    "description": "A date, or a collection of dates",
                    "purpose": [
                        "STATE_RECORD"
                    ]
                }
            ]
        },
        "google-gmail": {
            "io": "stdio",
            "pull_prompt": "You are an intelligent email assistant that has access to a user's services via a set of tools. Your goal is to retrieve the latest data out of their Gmail account. You will do this by using the get-unread-emails tool, which returns you an object containing many threadIDs. For the FIRST 5 threadIDs, you will call read-email with the threadID as an argument, and return the response.",
            "control_prompt": "You are an intelligent email assistant that has access to a user's services via a set of tools. Your goal is to help the user by translating their natural language requests into a precise, multi-step plan of tool calls.\n\n***\n### ## Core Principles for Planning\n\n1.  **Reason from Purpose, Not Just Name.** Your primary goal is to fulfill the user's intent. Before choosing a tool, first identify the **purpose** of the data you need (e.g., an `INTERACTION_LOG` to understand past conversations). Then, find tools that provide data types (`email_message`) with that purpose.\n\n2.  **The Unread-First Constraint.** You can only find emails by listing unread messages. The `get-unread-emails` tool is your ONLY way to discover emails. You cannot search for specific emails by sender, subject, or content if they have already been read. If a user asks for an email that is likely read, you must inform them of this limitation.\n\n3.  **Distinguish Between Resources and References.** Pay close attention to the `returns` field of each tool.\n    * If a tool `returns: { \"items\": { \"is_reference_to\": \"email_message\" } }`, you will only receive an **ID** (a reference). You must then devise a plan to use another tool to fetch the full resource.\n    * If a tool `returns: { \"items\": \"email_message\" }`, you will receive the full data object. The `read-email` tool is the only way to get the full content of an email using its ID.\n\n***\n### ## Your Planning Process\n\nFor every user query, you must follow this four-step process:\n\n1.  **Deconstruct the Goal:** What is the user's ultimate objective? (e.g., \"read my latest email,\" \"send a message\").\n2.  **Identify Required Data:** What specific pieces of information, especially an `email_id`, do you need to fulfill the goal? Can you obtain this ID given the Unread-First Constraint?\n3.  **Formulate a Multi-Step Plan:** Create a sequence of tool calls. If you need an `email_id` to `trash-email`, your first step must be to call `get-unread-emails`.\n4.  **Execute and Adapt:** Execute the first step of your plan. If you cannot find the requested resource or the user's request is impossible due to tool limitations, inform the user and ask for clarification or an alternative action.\n\n***\n### ## Example Thought Process\n\n**User Query:** \"What's my latest unread email? Read it to me and then trash it.\"\n\n**Your internal thought process should be:**\n\n1.  **Goal:** Find the newest unread email, read its contents, and then delete it.\n2.  **Required Data:** The `read-email` and `trash-email` tools both require an `email_id`. I do not have this.\n3.  **Plan:**\n    * First, I need to find a *reference* to the latest unread email to get its ID. I will use the `get-unread-emails` tool.\n    * **Step 1:** Call `get-unread-emails`.\n    * **Step 2:** Extract the `email_id` from the first email in the returned list.\n    * **Step 3:** Call `read-email` using the `email_id` from Step 2 to get its content.\n    * **Step 4:** Present the email's sender, subject, and body to the user.\n    * **Step 5:** Ask the user for confirmation before deleting.\n    * **Step 6:** Upon confirmation, call `trash-email` using the same `email_id`.\n4.  **Execute:** Begin by calling `get-unread-emails`.\n\n---\n### ## Specific Instructions\n\n* When using `send-email`, the `recipient_id` parameter must be the recipient's full email address. If you do not know the email address, you must ask the user for it.\n* For the `trash-email` action, always state your plan and ask for user confirmation before executing the final step.",
            "startup": [
                "python3",
                "-m",
                "gmail_server"
            ],
            "cwd": "gmail",
            "auth": true,
            "tools": [
                {
                    "name": "get_inbox",
                    "description": "Get latest emails from inbox",
                    "params": {
                        "type": "object",
                        "properties": {
                            "email_identifier": {
                                "type": "string",
                                "description": "The email address of the user to get the inbox for"
                            }
                        },
                        "required": [
                            "email_identifier"
                        ]
                    },
                    "returns": {
                        "type": "object",
                        "properties": {
                            "success": {
                                "type": "boolean",
                                "description": "Whether the operation was successful"
                            },
                            "emails": {
                                "type": "array",
                                "description": "The list of emails in the inbox",
                                "items": "email_message"
                            },
                            "has_more": {
                                "type": "boolean",
                                "description": "Whether there are more emails in the inbox"
                            }
                        }
                    }
                },
                {
                    "name": "get_email_details",
                    "description": "Get details about a specific email",
                    "params": {
                        "type": "object",
                        "properties": {
                            "email_identifier": {
                                "type": "string",
                                "description": "The email address of the user to get the email details for"
                            },
                            "msg_id": {
                                "type": "string",
                                "description": "The ID of the email to get the details for"
                            }
                        }
                    },
                    "returns": {
                        "type": "object",
                        "properties": {
                            "success": {
                                "type": "boolean",
                                "description": "Whether the operation was successful"
                            },
                            "email": {
                                "type": "email_message"
                            }
                        }
                    }
                },
                {
                    "name": "list_attachments",
                    "description": "List attachments for a specific email",
                    "params": {
                        "type": "object",
                        "properties": {
                            "email_identifier": {
                                "type": "string",
                                "description": "The email address of the user to list the attachments for"
                            },
                            "msg_id": {
                                "type": "string",
                                "description": "The ID of the email to list the attachments for"
                            }
                        }
                    },
                    "returns": {
                        "type": "object",
                        "properties": {
                            "success": {
                                "type": "boolean",
                                "description": "Whether the operation was successful"
                            },
                            "has_attachments": {
                                "type": "boolean",
                                "description": "Whether the email has attachments"
                            },
                            "message_id": {
                                "type": "string",
                                "description": "The ID of the email"
                            }
                        }
                    }
                },
                {
                    "name": "send_gmail",
                    "description": "Send an email",
                    "params": {
                        "type": "object",
                        "properties": {
                            "email_identifier": {
                                "type": "string",
                                "description": "The email address of the user to send the email from"
                            },
                            "to": {
                                "type": "string",
                                "description": "The email address of the recipient"
                            },
                            "subject": {
                                "type": "string",
                                "description": "The subject of the email"
                            },
                            "body": {
                                "type": "string",
                                "description": "The body of the email"
                            },
                            "attachment_paths": {
                                "type": "array",
                                "description": "The paths of the attachments to send",
                                "items": {
                                    "type": "string",
                                    "description": "The path of the attachment to send"
                                }
                            }
                        }
                    },
                    "returns": {
                        "type": "object",
                        "properties": {
                            "success": {
                                "type": "boolean",
                                "description": "Whether the operation was successful"
                            }
                        }
                    }
                }
            ],
            "data": [
                {
                    "name": "email_message",
                    "description": "A single, unique email message in the user's account, containing content, sender, recipients, and metadata.",
                    "purpose": [
                        "INTERACTION_LOG",
                        "STATE_RECORD",
                        "ACTIONABLE_INTENT"
                    ]
                }
            ]
        }
    }
}