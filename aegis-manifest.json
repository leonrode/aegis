{
    "name": "aegis",
    "version": "0.1.0",
    "servers": {
        "google-calendar": {
            "io": "stdio",
            "control_prompt": "You are an intelligent agent that has access to a user's services via a set of tools. Your goal is to help the user by translating their natural language requests into a precise, multi-step plan of tool calls.\\n\\n***\\n### ## Core Principles for Planning\\n\\n1.  **Reason from Purpose, Not Just Name.** Your primary goal is to fulfill the user's intent. Before choosing a tool, first identify the **purpose** of the data you need (e.g., `TEMPORAL_ANCHOR` for scheduling, `INTERACTION_LOG` for communication history). Then, find tools that return data types (`data_provided`) with that purpose.\\n2.  **Distinguish Between Resources and References.** Pay close attention to the `returns` field of each tool.\\n    * If a tool `returns: { \"items\": \"calendar_event\" }`, you will receive the full data object.\\n    * If a tool `returns: { \"items\": { \"is_reference_to\": \"calendar_event\" } }`, you will only receive an **ID** (a reference). You must then devise a plan to use another tool (like a `get-detail` function) to fetch the full resource using that ID.\\n3.  **Always Establish Context.** Before executing a plan, use utility tools like `get-current-date` and `get-timezone-info` to ground your understanding of the user's request in the correct time and place.\\n\\n***\\n### ## Your Planning Process\\n\\nFor every user query, you must follow this four-step process:\\n\\n1.  **Deconstruct the Goal:** What is the user's ultimate objective? (e.g., \"reschedule a meeting,\" \"find an email\").\\n2.  **Identify Required Data:** What specific pieces of information (and their `purpose` tags) do you need to fulfill the goal? Do you need a full resource or just a reference to start?\\n3.  **Formulate a Multi-Step Plan:** Create a sequence of tool calls. If you need an `eventId` to update an event, your first step must be to call a tool that can find a *reference* to that event.\\n4.  **Execute and Adapt:** Execute the first step of your plan. Based on the result, continue with your plan or adapt it if necessary. If the user's request is ambiguous or you cannot find a resource, inform the user and ask for clarification.\\n\\n***\\n### ## Example Thought Process\\n\\n**User Query:** \"Move my 'Product Review' meeting to this Friday at 4pm.\"\\n\\n**Your internal thought process should be:**\\n\\n1.  **Goal:** Update an existing calendar event.\\n2.  **Required Data:** The `update-event` tool requires an `eventId`. I do not have this. The `eventId` is contained within a `calendar_event` resource, which has a `TEMPORAL_ANCHOR` purpose.\\n3.  **Plan:**\\n    * First, I need to find a *reference* to the `calendar_event` to get its ID. I will use the `get-events` tool, which returns an array of `calendar_event` objects.\\n    * Before I search, I need to know the date for \"this Friday\". I will call `get-current-date`.\\n    * **Step 1:** Call `get-current-date`.\\n    * **Step 2:** Call `get-events` using a search query like \"Product Review\" and the date range for the current week to find the event and its `eventId`.\\n    * **Step 3:** Call `update-event` using the `eventId` from Step 2 and the new time (\"this Friday at 4pm\").\\n4.  **Execute:** Begin by calling `get-current-date`.\\n\\n---\\n### ## Specific Instructions\\n\\n* If a user refers to their own calendar as \"my calendar\" or \"my schedule\", you must use the special string `\"primary\"` for the `calendarId`.\\n* For all other calendars, you must first use `list-calendars` to find the correct `calendarId`.",
            "startup": [
                "python3",
                "-m",
                "local-mcp-test.mcp-google-calendar.mcp_server_google_calendar"
            ],
            "cwd": "",
            "auth": true,
            "tools": [
                {
                    "name": "get-events",
                    "description": "Get events from calendar",
                    "params": {
                        "type": "object",
                        "properties": {
                            "calendarId": {
                                "type": "string",
                                "description": "The ID of the calendar to get events from"
                            },
                            "timeMin": {
                                "type": "string",
                                "description": "The minimum time to get events from"
                            },
                            "timeMax": {
                                "type": "string",
                                "description": "The maximum time to get events from"
                            },
                            "maxResults": {
                                "type": "number",
                                "description": "The maximum number of events to return"
                            },
                            "singleEvents": {
                                "type": "boolean",
                                "description": "Whether to expand recurring events into instances"
                            },
                            "orderBy": {
                                "type": "string",
                                "description": "The order of the events returned",
                                "enum": [
                                    "startTime",
                                    "updated"
                                ]
                            }
                        },
                        "required": [
                            "calendarId"
                        ]
                    },
                    "returns": {
                        "type": "array",
                        "items": "calendar-event"
                    }
                },
                {
                    "name": "list-calendars",
                    "description": "List all calendars",
                    "returns": {
                        "type": "array",
                        "items": "calendar"
                    }
                },
                {
                    "name": "get-timezone-info",
                    "description": "Get the current timezone information from Google Calendar",
                    "returns": {
                        "type": "object",
                        "items": "timezone"
                    }
                },
                {
                    "name": "get-current-date",
                    "description": "Get the current date and time in the user's timezone. Useful for models that may have outdated knowledge of the current date.",
                    "returns": {
                        "type": "object",
                        "items": "date"
                    }
                },
                {
                    "name": "check-availability",
                    "description": "Check availability for yourself and/or others. When checking for other people in the organization, their emails will always be their name and then @gmail.com",
                    "params": {
                        "type": "object",
                        "properties": {
                            "calendarExpansionMax": {
                                "type": "number",
                                "description": "Maximal number of calendars for which FreeBusy information is to be provided. Optional. Maximum value is 50."
                            },
                            "groupExpansionMax": {
                                "type": "number",
                                "description": "Maximal number of calendar identifiers to be provided for a single group. Optional. An error is returned for a group with more members than this value. Maximum value is 100."
                            },
                            "items": {
                                "type": "array",
                                "description": "List of calendars and/or groups to query for FreeBusy information. Optional.",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "id": {
                                            "type": "string",
                                            "description": "The identifier of a calendar or a group."
                                        }
                                    }
                                }
                            },
                            "timeMax": {
                                "type": "string",
                                "description": "The end of the interval for the query formatted as per RFC3339."
                            },
                            "timeMin": {
                                "type": "string",
                                "description": "The start of the interval for the query formatted as per RFC3339."
                            },
                            "timeZone": {
                                "type": "string",
                                "description": "Time zone used in the response. Optional. The default is UTC."
                            }
                        }
                    },
                    "returns": {
                        "type": "object",
                        "properties": {
                            "free_slots": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "start": {
                                            "type": "string"
                                        },
                                        "end": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                {
                    "name": "create-event",
                    "description": "Create an event in Google Calendar. Supports both simple and complex events with all advanced features.",
                    "params": {
                        "type": "object",
                        "properties": {
                            "calendarId": {
                                "type": "string",
                                "description": "The ID of the calendar to create the event in. Use 'primary' for the user's primary calendar."
                            },
                            "summary": {
                                "type": "string",
                                "description": "Title of the event"
                            },
                            "description": {
                                "type": "string",
                                "description": "Description of the event. Can contain HTML."
                            },
                            "location": {
                                "type": "string",
                                "description": "Geographic location of the event as free-form text"
                            },
                            "colorId": {
                                "type": "string",
                                "description": "The color of the event. See the Calendar UI for the list of available colors."
                            },
                            "start_datetime": {
                                "type": "string",
                                "description": "Start time (YYYY-MM-DDTHH:MM:SS format or RFC3339)"
                            },
                            "end_datetime": {
                                "type": "string",
                                "description": "End time (YYYY-MM-DDTHH:MM:SS format or RFC3339)"
                            },
                            "timezone": {
                                "type": "string",
                                "description": "Timezone for the event (optional, auto-detected if not provided)"
                            },
                            "recurrence": {
                                "type": "array",
                                "description": "List of RRULE, EXRULE, RDATE and EXDATE lines for a recurring event",
                                "items": {
                                    "type": "string",
                                    "description": "Recurrence rule in iCalendar format (e.g., 'RRULE:FREQ=WEEKLY;COUNT=10;BYDAY=TU')"
                                }
                            },
                            "attendees": {
                                "type": "array",
                                "description": "The attendees of the event",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "email": {
                                            "type": "string",
                                            "description": "The attendee's email address"
                                        },
                                        "displayName": {
                                            "type": "string",
                                            "description": "The attendee's name, if available"
                                        },
                                        "optional": {
                                            "type": "boolean",
                                            "description": "Whether this is an optional attendee",
                                            "default": false
                                        },
                                        "responseStatus": {
                                            "type": "string",
                                            "description": "The attendee's response status",
                                            "enum": [
                                                "needsAction",
                                                "declined",
                                                "tentative",
                                                "accepted"
                                            ],
                                            "default": "needsAction"
                                        },
                                        "comment": {
                                            "type": "string",
                                            "description": "The attendee's response comment"
                                        },
                                        "additionalGuests": {
                                            "type": "integer",
                                            "description": "Number of additional guests",
                                            "minimum": 0,
                                            "default": 0
                                        }
                                    },
                                    "required": [
                                        "email"
                                    ]
                                }
                            },
                            "attachments": {
                                "type": "array",
                                "description": "File attachments for the event (Google Drive files only)",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "fileId": {
                                            "type": "string",
                                            "description": "ID of the Google Drive file"
                                        },
                                        "fileUrl": {
                                            "type": "string",
                                            "description": "URL of the file in Google Drive"
                                        },
                                        "title": {
                                            "type": "string",
                                            "description": "Title of the attachment"
                                        },
                                        "mimeType": {
                                            "type": "string",
                                            "description": "MIME type of the attachment"
                                        }
                                    },
                                    "required": [
                                        "fileId"
                                    ]
                                },
                                "maxItems": 25
                            },
                            "reminders": {
                                "type": "object",
                                "description": "Reminders for the event",
                                "properties": {
                                    "useDefault": {
                                        "type": "boolean",
                                        "description": "Whether to use the default reminders of the calendar",
                                        "default": true
                                    },
                                    "overrides": {
                                        "type": "array",
                                        "description": "Custom reminders for the event",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "method": {
                                                    "type": "string",
                                                    "description": "The method used by this reminder",
                                                    "enum": [
                                                        "email",
                                                        "popup"
                                                    ]
                                                },
                                                "minutes": {
                                                    "type": "integer",
                                                    "description": "Number of minutes before the event to trigger the reminder"
                                                }
                                            },
                                            "required": [
                                                "method",
                                                "minutes"
                                            ]
                                        }
                                    }
                                }
                            },
                            "visibility": {
                                "type": "string",
                                "description": "Visibility of the event",
                                "enum": [
                                    "default",
                                    "public",
                                    "private",
                                    "confidential"
                                ],
                                "default": "default"
                            },
                            "transparency": {
                                "type": "string",
                                "description": "Whether the event blocks time on the calendar",
                                "enum": [
                                    "opaque",
                                    "transparent"
                                ],
                                "default": "opaque"
                            },
                            "conferenceData": {
                                "type": "object",
                                "description": "Conference-related information",
                                "properties": {
                                    "createRequest": {
                                        "type": "object",
                                        "description": "Request to create a new conference",
                                        "properties": {
                                            "requestId": {
                                                "type": "string",
                                                "description": "Client-generated unique ID for this request"
                                            },
                                            "conferenceSolutionKey": {
                                                "type": "object",
                                                "properties": {
                                                    "type": {
                                                        "type": "string",
                                                        "description": "Conference solution type (e.g., 'hangoutsMeet')"
                                                    }
                                                },
                                                "required": [
                                                    "type"
                                                ]
                                            }
                                        },
                                        "required": [
                                            "requestId"
                                        ]
                                    }
                                }
                            }
                        },
                        "required": [
                            "calendarId",
                            "summary",
                            "start_datetime",
                            "end_datetime"
                        ]
                    },
                    "returns": {
                        "type": "object",
                        "items": "calendar-event"
                    }
                },
                {
                    "name": "delete-event",
                    "description": "Delete an event from Google Calendar",
                    "params": {
                        "type": "object",
                        "properties": {
                            "calendarId": {
                                "type": "string",
                                "description": "The ID of the calendar containing the event. Use 'primary' for the user's primary calendar."
                            },
                            "eventId": {
                                "type": "string",
                                "description": "The ID of the event to delete"
                            },
                            "sendUpdates": {
                                "type": "string",
                                "description": "Whether to send notifications about the deletion to all attendees",
                                "enum": [
                                    "all",
                                    "externalOnly",
                                    "none"
                                ],
                                "default": "all"
                            }
                        },
                        "required": [
                            "calendarId",
                            "eventId"
                        ]
                    },
                    "returns": {
                        "type": "object",
                        "properties": {
                            "status": {
                                "type": "string",
                                "enum": [
                                    "success",
                                    "failure"
                                ]
                            }
                        }
                    }
                },
                {
                    "name": "update-event",
                    "description": "Update an existing event in Google Calendar. All fields are optional - only specify the fields you want to update.",
                    "params": {
                        "type": "object",
                        "properties": {
                            "calendarId": {
                                "type": "string",
                                "description": "The ID of the calendar containing the event. Use 'primary' for the user's primary calendar."
                            },
                            "eventId": {
                                "type": "string",
                                "description": "The ID of the event to update"
                            },
                            "summary": {
                                "type": "string",
                                "description": "New title of the event"
                            },
                            "description": {
                                "type": "string",
                                "description": "New description of the event. Can contain HTML."
                            },
                            "location": {
                                "type": "string",
                                "description": "New location of the event"
                            },
                            "colorId": {
                                "type": "string",
                                "description": "The color of the event"
                            },
                            "start_datetime": {
                                "type": "string",
                                "description": "New start time (YYYY-MM-DDTHH:MM:SS format or RFC3339)"
                            },
                            "end_datetime": {
                                "type": "string",
                                "description": "New end time (YYYY-MM-DDTHH:MM:SS format or RFC3339)"
                            },
                            "timezone": {
                                "type": "string",
                                "description": "Timezone for the event (optional, auto-detected if not provided)"
                            },
                            "attendees": {
                                "type": "array",
                                "description": "List of attendees for the event",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "email": {
                                            "type": "string",
                                            "description": "The attendee's email address"
                                        },
                                        "displayName": {
                                            "type": "string",
                                            "description": "The attendee's name, if available"
                                        },
                                        "optional": {
                                            "type": "boolean",
                                            "description": "Whether this is an optional attendee",
                                            "default": false
                                        },
                                        "responseStatus": {
                                            "type": "string",
                                            "description": "The attendee's response status",
                                            "enum": [
                                                "needsAction",
                                                "declined",
                                                "tentative",
                                                "accepted"
                                            ],
                                            "default": "needsAction"
                                        }
                                    },
                                    "required": [
                                        "email"
                                    ]
                                }
                            },
                            "recurrence": {
                                "type": "array",
                                "description": "List of RRULE, EXRULE, RDATE and EXDATE lines for a recurring event",
                                "items": {
                                    "type": "string",
                                    "description": "Recurrence rule in iCalendar format (e.g., 'RRULE:FREQ=WEEKLY;COUNT=10;BYDAY=TU')"
                                }
                            },
                            "reminders": {
                                "type": "object",
                                "description": "Reminders for the event",
                                "properties": {
                                    "useDefault": {
                                        "type": "boolean",
                                        "description": "Whether to use the default reminders of the calendar",
                                        "default": true
                                    },
                                    "overrides": {
                                        "type": "array",
                                        "description": "Custom reminders for the event",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "method": {
                                                    "type": "string",
                                                    "description": "The method used by this reminder",
                                                    "enum": [
                                                        "email",
                                                        "popup"
                                                    ]
                                                },
                                                "minutes": {
                                                    "type": "integer",
                                                    "description": "Number of minutes before the event to trigger the reminder"
                                                }
                                            },
                                            "required": [
                                                "method",
                                                "minutes"
                                            ]
                                        }
                                    }
                                }
                            },
                            "visibility": {
                                "type": "string",
                                "description": "Visibility of the event",
                                "enum": [
                                    "default",
                                    "public",
                                    "private",
                                    "confidential"
                                ],
                                "default": "default"
                            },
                            "transparency": {
                                "type": "string",
                                "description": "Whether the event blocks time on the calendar",
                                "enum": [
                                    "opaque",
                                    "transparent"
                                ],
                                "default": "opaque"
                            },
                            "sendUpdates": {
                                "type": "string",
                                "description": "Whether to send notifications about the update to all attendees",
                                "enum": [
                                    "all",
                                    "externalOnly",
                                    "none"
                                ],
                                "default": "all"
                            }
                        },
                        "required": [
                            "calendarId",
                            "eventId"
                        ]
                    },
                    "returns": {
                        "type": "object",
                        "items": "calendar-event"
                    }
                }
            ],
            "data": [
                {
                    "name": "calendar-event",
                    "description": "A single event, appointment, or meeting in a calendar",
                    "purpose": [
                        "TEMPORAL_ANCHOR, STATE_RECORD"
                    ]
                },
                {
                    "name": "calendar",
                    "description": "A calendar, or a collection of events, appointments, or meetings",
                    "purpose": [
                        "STATE_RECORD",
                        "KNOWLEDGE_BASE_ENTRY",
                        "STRUCTURAL_CONTAINER"
                    ]
                },
                {
                    "name": "timezone",
                    "description": "A timezone, or a collection of timezones",
                    "purpose": [
                        "STATE_RECORD"
                    ]
                },
                {
                    "name": "date",
                    "description": "A date, or a collection of dates",
                    "purpose": [
                        "STATE_RECORD"
                    ]
                }
            ]
        },
        "google-gmail": {
            "io": "stdio",
            "control_prompt": "You are an intelligent agent with access to a user's Gmail account. Your goal is to help the user manage their emails by creating a multi-step plan of tool calls based on their natural language requests.\\n\\n***\\n### ## Core Principles for Planning\\n\\n1.  **Reason from Data Purpose:** First, identify the **purpose** of the data you need (e.g., `INTERACTION_LOG` to read conversations, `STRUCTURAL_CONTAINER` to find a label). Then, find tools that `return` data types (`data_provided`) with that purpose.\\n2.  **Distinguish Resources from References:** Pay close attention to the `returns` field. If a tool `returns: { \"items\": { \"is_reference_to\": \"email_message\" } }`, it means you only get an **ID**. Your next step must be to call a different tool (like `read-email`) to get the full resource details using that ID.\\n\\n***\\n### ## Your Planning Process\\n\\nFor every query, you must create and follow a plan:\\n\\n1.  **Deconstruct the Goal:** What is the user's objective? (e.g., \"find and label an email\").\\n2.  **Identify Required Data:** What information and `purpose` tags do you need? Do you need a full resource or just a reference to start?\\n3.  **Formulate a Multi-Step Plan:** If you need a `label_id` and an `email_id` to apply a label, your plan must include steps to get both of those IDs first.\\n4.  **Execute and Adapt:** Execute the plan step-by-step. If you can't find a resource, inform the user.\\n\\n***\\n### ## Example Thought Process\\n\\n**User Query:** \"Find the latest email from 'billing@example.com' and apply the 'Receipts' label to it.\"\\n\\n**Your internal thought process should be:**\\n\\n1.  **Goal:** Apply a label to an email.\\n2.  **Required Data:** The `apply-label` tool requires a `label_id` and an `email_id`. I have neither.\\n3.  **Plan:**\\n    * **Step 1:** Find the `label_id`. I will call the `list-labels` tool, which returns full `gmail_label` objects, to find the ID for the label named 'Receipts'.\\n    * **Step 2:** Find the `email_id`. I will call the `search-emails` tool with the query `from:billing@example.com`. This tool returns a *reference* to an `email_message`. I can extract the `email_id` from this reference.\\n    * **Step 3:** Call `apply-label` using the `label_id` from Step 1 and the `email_id` from Step 2.\\n4.  **Execute:** Begin by calling `list-labels`.",
            "startup": [
                "python3",
                "-m",
                "gmail-mcp.src.gmail.server",
                "--creds-file-path",
                "credentials-web.json",
                "--token-path",
                "gmail-mcp/token.json"
            ],
            "cwd": "",
            "auth": true,
            "tools": [
                {
                    "name": "send-email",
                    "description": "Send an email to a recipient",
                    "params": {
                        "type": "object",
                        "properties": {
                            "recipient_id": {
                                "type": "string",
                                "description": "The ID of the recipient to send the email to"
                            },
                            "subject": {
                                "type": "string",
                                "description": "The subject of the email"
                            },
                            "message": {
                                "type": "string",
                                "description": "The body of the email"
                            }
                        },
                        "required": [
                            "recipient_id",
                            "subject",
                            "message"
                        ]
                    },
                    "returns": {
                        "type": "object",
                        "items": "email_message"
                    }
                },
                {
                    "name": "get-unread-emails",
                    "description": "Get all unread emails in the user's inbox",
                    "returns": {
                        "type": "array",
                        "items": {
                            "is_reference_to": "email_message"
                        }
                    }
                },
                {
                    "name": "read-email",
                    "description": "Read an email from the user's inbox",
                    "params": {
                        "type": "object",
                        "properties": {
                            "email_id": {
                                "type": "string",
                                "description": "The ID of the email to read"
                            }
                        },
                        "required": [
                            "email_id"
                        ]
                    },
                    "returns": {
                        "type": "object",
                        "items": "email_message"
                    }
                },
                {
                    "name": "open-email",
                    "description": "Open an email from the user's inbox in the browser",
                    "params": {
                        "type": "object",
                        "properties": {
                            "email_id": {
                                "type": "string",
                                "description": "The ID of the email to open in the browser"
                            }
                        },
                        "required": [
                            "email_id"
                        ]
                    },
                    "returns": {
                        "type": "object",
                        "properties": {
                            "status": {
                                "type": "string"
                            }
                        }
                    }
                },
                {
                    "name": "trash-email",
                    "description": "Trash an email from the user's inbox",
                    "params": {
                        "type": "object",
                        "properties": {
                            "email_id": {
                                "type": "string",
                                "description": "The ID of the email to trash"
                            }
                        },
                        "required": [
                            "email_id"
                        ]
                    },
                    "returns": {
                        "type": "object",
                        "properties": {
                            "status": {
                                "type": "string",
                                "enum": [
                                    "success",
                                    "failure"
                                ]
                            }
                        }
                    }
                },
                {
                    "name": "mark-email-as-read",
                    "description": "Mark an email as read in the user's inbox",
                    "params": {
                        "type": "object",
                        "properties": {
                            "email_id": {
                                "type": "string",
                                "description": "The ID of the email to mark as read"
                            }
                        },
                        "required": [
                            "email_id"
                        ]
                    },
                    "returns": {
                        "type": "object",
                        "properties": {
                            "status": {
                                "type": "string",
                                "enum": [
                                    "success",
                                    "failure"
                                ]
                            }
                        }
                    }
                },
                {
                    "name": "create-draft",
                    "description": "Create a draft email in the user's draft folder",
                    "params": {
                        "type": "object",
                        "properties": {
                            "recipient_id": {
                                "type": "string",
                                "description": "The ID of the recipient to send the email to"
                            },
                            "subject": {
                                "type": "string",
                                "description": "The subject of the email"
                            },
                            "message": {
                                "type": "string",
                                "description": "The body of the email"
                            }
                        },
                        "required": [
                            "recipient_id",
                            "subject",
                            "message"
                        ]
                    },
                    "returns": {
                        "type": "object",
                        "items": "draft_message"
                    }
                },
                {
                    "name": "list-drafts",
                    "description": "List all drafts in the user's draft folder",
                    "returns": {
                        "type": "array",
                        "items": {
                            "is_reference_to": "draft_message"
                        }
                    }
                },
                {
                    "name": "list-labels",
                    "description": "List all labels in the user's inbox",
                    "returns": {
                        "type": "array",
                        "items": "gmail_label"
                    }
                },
                {
                    "name": "create-label",
                    "description": "Create a new label in the user's inbox",
                    "params": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "The name of the label to create"
                            }
                        },
                        "required": [
                            "name"
                        ]
                    },
                    "returns": {
                        "type": "object",
                        "items": "gmail_label"
                    }
                },
                {
                    "name": "apply-label",
                    "description": "Apply a label to an email",
                    "params": {
                        "type": "object",
                        "properties": {
                            "email_id": {
                                "type": "string",
                                "description": "The ID of the email to apply the label to"
                            },
                            "label_id": {
                                "type": "string",
                                "description": "The ID of the label to apply"
                            }
                        },
                        "required": [
                            "email_id",
                            "label_id"
                        ]
                    },
                    "returns": {
                        "type": "object",
                        "properties": {
                            "status": {
                                "type": "string",
                                "enum": [
                                    "success",
                                    "failure"
                                ]
                            }
                        }
                    }
                },
                {
                    "name": "remove-label",
                    "description": "Remove a label from an email",
                    "params": {
                        "type": "object",
                        "properties": {
                            "email_id": {
                                "type": "string",
                                "description": "The ID of the email to remove the label from"
                            },
                            "label_id": {
                                "type": "string",
                                "description": "The ID of the label to remove"
                            }
                        },
                        "required": [
                            "email_id",
                            "label_id"
                        ]
                    },
                    "returns": {
                        "type": "object",
                        "properties": {
                            "status": {
                                "type": "string",
                                "enum": [
                                    "success",
                                    "failure"
                                ]
                            }
                        }
                    }
                },
                {
                    "name": "search-by-label",
                    "description": "Search for emails by label",
                    "params": {
                        "type": "object",
                        "properties": {
                            "label_id": {
                                "type": "string",
                                "description": "The ID of the label to search by"
                            }
                        },
                        "required": [
                            "label_id"
                        ]
                    },
                    "returns": {
                        "type": "array",
                        "items": {
                            "is_reference_to": "email_message"
                        }
                    }
                },
                {
                    "name": "list-filters",
                    "description": "List all filters in the user's inbox",
                    "returns": {
                        "type": "array",
                        "items": "gmail_filter"
                    }
                },
                {
                    "name": "get-filter",
                    "description": "Get a filter by ID",
                    "params": {
                        "type": "object",
                        "properties": {
                            "filter_id": {
                                "type": "string",
                                "description": "The ID of the filter to get"
                            }
                        },
                        "required": [
                            "filter_id"
                        ]
                    },
                    "returns": {
                        "type": "object",
                        "items": "gmail_filter"
                    }
                },
                {
                    "name": "create-filter",
                    "description": "Create a new filter in the user's inbox",
                    "params": {
                        "type": "object",
                        "properties": {
                            "from_email": {
                                "type": "string",
                                "description": "The ID of the recipient to send the email to"
                            },
                            "to_email": {
                                "type": "string",
                                "description": "The ID of the recipient to send the email to"
                            },
                            "subject": {
                                "type": "string",
                                "description": "The subject of the email"
                            },
                            "query": {
                                "type": "string",
                                "description": "The query to search for"
                            },
                            "has_attachment": {
                                "type": "boolean",
                                "description": "Whether the email has an attachment"
                            },
                            "exclude_chats": {
                                "type": "boolean",
                                "description": "Whether to exclude chats"
                            },
                            "size_comparison": {
                                "type": "string",
                                "description": "The size comparison to search for"
                            },
                            "size": {
                                "type": "integer",
                                "description": "The size of the email"
                            },
                            "add_label_ids": {
                                "type": "array",
                                "description": "The labels to add to the email"
                            },
                            "remove_label_ids": {
                                "type": "array",
                                "description": "The labels to remove from the email"
                            },
                            "forward_to": {
                                "type": "string",
                                "description": "The email to forward the email to"
                            }
                        }
                    },
                    "anyOf": [
                        {
                            "required": [
                                "from_email"
                            ]
                        },
                        {
                            "required": [
                                "to_email"
                            ]
                        },
                        {
                            "required": [
                                "subject"
                            ]
                        },
                        {
                            "required": [
                                "query"
                            ]
                        },
                        {
                            "required": [
                                "has_attachment"
                            ]
                        },
                        {
                            "required": [
                                "exclude_chats"
                            ]
                        },
                        {
                            "required": [
                                "size_comparison"
                            ]
                        },
                        {
                            "required": [
                                "size"
                            ]
                        },
                        {
                            "required": [
                                "add_label_ids"
                            ]
                        },
                        {
                            "required": [
                                "remove_label_ids"
                            ]
                        },
                        {
                            "required": [
                                "forward_to"
                            ]
                        }
                    ],
                    "returns": {
                        "type": "object",
                        "items": "gmail_filter"
                    }
                },
                {
                    "name": "delete-filter",
                    "description": "Delete a filter by ID",
                    "params": {
                        "type": "object",
                        "properties": {
                            "filter_id": {
                                "type": "string",
                                "description": "The ID of the filter to delete"
                            }
                        },
                        "required": [
                            "filter_id"
                        ]
                    },
                    "returns": {
                        "type": "object",
                        "properties": {
                            "status": {
                                "type": "string",
                                "enum": [
                                    "success",
                                    "failure"
                                ]
                            }
                        }
                    }
                },
                {
                    "name": "search-emails",
                    "description": "Search for emails by query",
                    "params": {
                        "type": "object",
                        "properties": {
                            "query": {
                                "type": "string",
                                "description": "The query to search for"
                            },
                            "max_results": {
                                "type": "integer",
                                "description": "The maximum number of results to return",
                                "default": 50
                            }
                        },
                        "required": [
                            "query"
                        ]
                    },
                    "returns": {
                        "type": "array",
                        "items": {
                            "is_reference_to": "email_message"
                        }
                    }
                },
                {
                    "name": "create-folder",
                    "description": "Create a new folder in the user's inbox",
                    "params": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "The name of the folder to create"
                            }
                        },
                        "required": [
                            "name"
                        ]
                    },
                    "returns": {
                        "type": "object",
                        "items": "gmail_folder"
                    }
                },
                {
                    "name": "move-to-folder",
                    "description": "Move an email to a folder",
                    "params": {
                        "type": "object",
                        "properties": {
                            "email_id": {
                                "type": "string",
                                "description": "The ID of the email to move"
                            },
                            "folder_id": {
                                "type": "string",
                                "description": "The ID of the folder to move the email to"
                            }
                        },
                        "required": [
                            "email_id",
                            "folder_id"
                        ]
                    },
                    "returns": {
                        "type": "object",
                        "properties": {
                            "status": {
                                "type": "string",
                                "enum": [
                                    "success",
                                    "failure"
                                ]
                            }
                        }
                    }
                },
                {
                    "name": "list-folders",
                    "description": "List all folders in the user's inbox",
                    "returns": {
                        "type": "array",
                        "items": "gmail_folder"
                    }
                },
                {
                    "name": "rename-label",
                    "description": "Rename a label by ID",
                    "params": {
                        "type": "object",
                        "properties": {
                            "label_id": {
                                "type": "string",
                                "description": "The ID of the label to rename"
                            },
                            "new_name": {
                                "type": "string",
                                "description": "The new name of the label"
                            }
                        },
                        "required": [
                            "label_id",
                            "new_name"
                        ]
                    },
                    "returns": {
                        "type": "object",
                        "items": "gmail_label"
                    }
                },
                {
                    "name": "delete-label",
                    "description": "Delete a label by ID",
                    "params": {
                        "type": "object",
                        "properties": {
                            "label_id": {
                                "type": "string",
                                "description": "The ID of the label to delete"
                            }
                        },
                        "required": [
                            "label_id"
                        ]
                    },
                    "returns": {
                        "type": "object",
                        "properties": {
                            "status": {
                                "type": "string",
                                "enum": [
                                    "success",
                                    "failure"
                                ]
                            }
                        }
                    }
                },
                {
                    "name": "archive-email",
                    "description": "Archive an email by ID",
                    "params": {
                        "type": "object",
                        "properties": {
                            "email_id": {
                                "type": "string",
                                "description": "The ID of the email to archive"
                            }
                        },
                        "required": [
                            "email_id"
                        ]
                    },
                    "returns": {
                        "type": "object",
                        "properties": {
                            "status": {
                                "type": "string",
                                "enum": [
                                    "success",
                                    "failure"
                                ]
                            }
                        }
                    }
                },
                {
                    "name": "batch-archive",
                    "description": "Archive a batch of emails by query",
                    "params": {
                        "type": "object",
                        "properties": {
                            "query": {
                                "type": "string",
                                "description": "The query to search for"
                            },
                            "max_emails": {
                                "type": "integer",
                                "description": "The maximum number of emails to archive",
                                "default": 100
                            }
                        },
                        "required": [
                            "query"
                        ]
                    },
                    "returns": {
                        "type": "object",
                        "properties": {
                            "status": {
                                "type": "string"
                            },
                            "archived_count": {
                                "type": "integer"
                            }
                        }
                    }
                },
                {
                    "name": "list-archived",
                    "description": "List all archived emails in the user's inbox",
                    "params": {
                        "type": "object",
                        "properties": {
                            "max_results": {
                                "type": "integer",
                                "description": "The maximum number of results to return",
                                "default": 50
                            }
                        },
                        "required": [
                            "max_results"
                        ]
                    },
                    "returns": {
                        "type": "array",
                        "items": {
                            "is_reference_to": "email_message"
                        }
                    }
                },
                {
                    "name": "restore-to-inbox",
                    "description": "Restore an email to the user's inbox",
                    "params": {
                        "type": "object",
                        "properties": {
                            "email_id": {
                                "type": "string",
                                "description": "The ID of the email to restore"
                            }
                        },
                        "required": [
                            "email_id"
                        ]
                    },
                    "returns": {
                        "type": "object",
                        "properties": {
                            "status": {
                                "type": "string",
                                "enum": [
                                    "success",
                                    "failure"
                                ]
                            }
                        }
                    }
                }
            ],
            "data": [
                {
                    "name": "email_message",
                    "description": "A single, unique email message in the user's account, containing content, sender, recipients, and metadata.",
                    "purpose": [
                        "INTERACTION_LOG",
                        "STATE_RECORD",
                        "ACTIONABLE_INTENT"
                    ]
                },
                {
                    "name": "draft_message",
                    "description": "An unsent email message saved in the user's drafts.",
                    "purpose": [
                        "ACTIONABLE_INTENT",
                        "KNOWLEDGE_BASE_ENTRY"
                    ]
                },
                {
                    "name": "gmail_label",
                    "description": "A tag used to organize and categorize email messages.",
                    "purpose": [
                        "STRUCTURAL_CONTAINER"
                    ]
                },
                {
                    "name": "gmail_folder",
                    "description": "A container for organizing emails, which is functionally equivalent to a label in Gmail.",
                    "purpose": [
                        "STRUCTURAL_CONTAINER"
                    ]
                },
                {
                    "name": "gmail_filter",
                    "description": "An automated rule that applies actions to incoming emails based on user-defined criteria.",
                    "purpose": [
                        "KNOWLEDGE_BASE_ENTRY"
                    ]
                }
            ]
        }
    }
}